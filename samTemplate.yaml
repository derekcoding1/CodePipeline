AWSTemplateFormatVersion: '2010-09-09'
#Transform: 'AWS::Serverless-2016-10-31'
Description: CD Demo Lambda
Resources:
  bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: cloud-test-hw3
    #LambdaConfigurations:
        #Event:s3:ObjectCreated:Put 
        #Function: 
          #Ref:IndexLambda
  bucket1:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: cloud-test-hw3-frontend
      
  role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        #- arn:aws:iam::${AWS::AccountId}:role/LF1
        #- arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        #- arn:aws:iam::aws:policy/AmazonS3FullAccess
        #- arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        #- arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        #- arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        #- arn:aws:iam::aws:policy/service-role/AWSQuickSightElasticsearchPolicy
        #- arn:aws:iam::975475373144:policy/ESPolicy
        #- arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        #- arn:aws:iam::975475373144:policy/service-role/AWSLambdaBasicExecutionRole-675f5d5a-3bd7-4ce4-a2ae-72a22182526f
      #Path: /service-role/
      RoleName: test-hw3
      
  # IndexLambda:
    # Type: 'AWS::Serverless::Function'
    # Properties:
      # FunctionName: LF1
      # Handler: lambda_function.lambda_handler
      # Runtime: python3.8
      # CodeUri: ./LambdaCode1
      # Description: 'Lambda function for Index photos'
      # MemorySize: 128
      # Timeout: 30
      # Role: 'arn:aws:iam::975475373144:role/service-role/search-photos-role-o0m7excf'
      # #Role: !Ref role
      # Events:
        # getPicsAPI:
          # Type: Api
          # Properties:
            # Path: /search
            # Method: get
      # Environment:
        # Variables:
          # REGION: us-east-1
          
  # SearchLambda:
    # Type: 'AWS::Serverless::Function'
    # Properties:
      # FunctionName: LF2
      # Handler: lambda_function.lambda_handler
      # Runtime: python3.8
      # CodeUri: ./LambdaCode2
      # Description: 'Lambda function for photo search'
      # MemorySize: 128
      # Timeout: 30
      # Role: 'arn:aws:iam::975475373144:role/service-role/search-photos-role-o0m7excf'
      # #Role: !Ref role
      # Environment:
        # Variables:
          # REGION: us-east-1
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: client-code-build-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource:
                  - !Sub arn:aws:s3:::${bucket}/*
                  #- !Sub arn:aws:s3:::${ClientBucket}/*
                  #- !Sub arn:aws:s3:::${ClientBucket}
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListObjects

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: code-pipeline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${bucket}/*
                  #- !Sub arn:aws:s3:::${ClientBucket}/*
                  #- !Sub arn:aws:s3:::${ClientBucket}
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListObjects
              - Resource:
                  - arn:aws:s3:::*
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Resource: "*"
                Effect: Allow
                Action:
                  - lambda:*
  ClientBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - echo Installing packages for client
                - npm install
            build:
              commands:
                - echo Building client
                - npm run build
          artifacts:
            files:
              - 'build/*'
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/nodejs:8.11.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
      Name: !Sub ${AWS::StackName}-build-client
      ServiceRole: !Ref CodeBuildServiceRole

  DeployClientBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          phases:
            build:
              commands:
                - echo Deploying client to S3
                - cd ./build && aws s3 cp . s3://$S3_CLIENT_BUCKET --recursive > deploymentResult.txt
          artifacts:
            files: build/deploymentResult.txt
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/nodejs:6.3.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: S3_CLIENT_BUCKET
            #Value: !Ref ClientBucket
      Name: !Sub ${AWS::StackName}-deploy-client
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        #Location: !Ref AssetsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: ClientBuildStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ClientBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: ClientBuild
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: ClientDeployStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DeployClientBuildProject
              InputArtifacts:
                - Name: ClientBuild
              OutputArtifacts:
                - Name: ClientDeploymentOutput
              RunOrder: 1
  ServerlessRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: test-hw3
      Description: A demo API
      Body: 
        swagger: '2.0'
        info:
          title: AI Photo Search
          description: 'AI Photo Search application, built during the Cloud and Big Data course at Columbia University.'
          version: 1.0.0
        schemes:
          - https
        basePath: /v1
        produces:
          - application/json
        paths:
          /search:
            get:
              summary: photo search method
              description: |
                This API takes in a search query as a query parameter and returns zero or more photos that match the search query.
              operationId: searchPhotos
              parameters:
                - in: query
                  name: q
                  schema:
                    type: string
                  description: the string to be searched
              produces:
                - application/json
              responses:
                '200':
                  description: search results
                  schema:
                    $ref: '#/definitions/SearchResponse'
                '403':
                  description: Unauthorized
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
          /upload/{folder}/{item}:
              put:
                summary: photo upload method
                description: |
                  This API takes in the multi-part body sent to it (ex. a photo) and uploads it to an S3 bucket.
                operationId: uploadPhoto
                consumes:
                  - image/png
                  - image/jpg
                  - image/jpeg
                produces:
                  - application/json
                responses:
                  '200':
                    description: S3 PUT operation response
                    schema:
                      type: object
                  '403':
                    description: Unauthorized
                    schema:
                      $ref: '#/definitions/Error'
                  '500':
                    description: Unexpected error
                    schema:
                      $ref: '#/definitions/Error'
        definitions:
          SearchResponse:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: '#/definitions/Photo'
          Photo:
            type: object
            properties:
              url:
                type: string
              labels:
                type: array
                items:
                  type: string
          Error:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
